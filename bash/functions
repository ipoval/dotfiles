#!/bin/bash

# set -ex # debug mode

pman () {
  man -t ${1} | open -f -a /Applications/Preview.app/
}

function hostip() {
  ip=`sudo ifconfig en0 | \egrep "inet[[:space:]]" | cut -f 2 -d " "`
  echo "Your IP address is $ip"
}

# grep multiple pdf files
function pdfgrep() {
  find . -name '*.pdf' -exec pdftotext {} - \; grep $@;
}

# find top-size files in the current directory w. an optional arg. to limit the output
#
# usage
# a. ducks
# b. ducks 20
#
function ducks() {
  number_of_files_to_display=${1:-10}
  number_of_files_to_display=$((number_of_files_to_display+1))

  du -cms * | sort -rn | head -n $number_of_files_to_display
}

# copy current path
function ccp() {
  pwd | pbcopy
}

function take() {
  mkdir -p "$1" && cd "$_"
}

# kill the process by name
# a. kil skype
#
function kil() {
  ps ax | grep -i "$1" | cut -d ' ' -f 1 | xargs kill -9
}

function g() {
  if [[ $# != 0 ]]; then git $*; else git status -sb; fi
}

function gg() {
  git commit -v -a -m "$*";
}

# git clone from github
function ghbcln() {
  git clone --depth 1 git://github.com/$1/$2.git -q &
}

# setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}

# Init a remote git repo from the local one
# a. `new-git git@example.com repository_name`
function new-git() {
  ssh "$1" "mkdir $2.git && cd $2.git && git --bare init"
  git remote add origin $1:$2.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

function markdown() {
  /Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html
}

# nginx
function nginx_stop() {
  kil nginx
}
function nginx_start() {
  sudo /opt/nginx/sbin/nginx
}

function rmt() {
  for file in $*
  do
    __rm_single_file $file
  done
}

function __rm_single_file() {
  if ! [ -d ~/.Trash/ ]
  then
    command /bin/mkdir ~/.Trash
  fi

  if ! [ $# -eq 1 ]
  then
    echo "__rm_single_file: 1 argument required but $# passed."
    exit
  fi

  if [ -e $1 ]
  then
    BASENAME=`basename $1`
    NAME=$BASENAME
    COUNT=0
    while [ -e ~/.Trash/$NAME ]
    do
      COUNT=$(($COUNT+1))
      NAME="$BASENAME.$COUNT"
    done

    command /bin/mv $1 ~/.Trash/$NAME
  else
    echo "No such file or directory: $file"
  fi
}

# length "string" # => 6
function length() {
  # impl 1
  echo $1 | grep -ho . | wc -l

  # impl 2
  # `printf $1 | wc -c`
}

# upcase "str" # => "STR"
function upcase() {
  echo $1 | tr 'a-z' 'A-Z'
}

# print system information
function psysinfo() {
  echo ' '
  echo '---------------------------------'
  echo '- S E R V E R -'
  echo '---------------------------------'
  echo ' '
  echo "Network node hostname : `uname -n`"
  echo "Machine hardware name : `uname -m`"
  echo "Operating system      : `uname -o`"
  echo "Kernel name           : `uname -s`"
  echo "Kernel version        : `uname -v`"
  echo "Kernel release        : `uname -r`"
  echo "Processor Type        : `uname -p`"
  echo "Hardware Platform     : `uname -i`"
  echo ' '
  echo '---------------------------------'
  echo '- M E M O R Y -'
  echo '---------------------------------'
  echo ' '
  cat /proc/meminfo | grep MemTotal
  echo ' '
  echo '---------------------------------'
  echo '- P R O C E S S O R S -'
  echo '---------------------------------'
  echo ' '
  cat /proc/cpuinfo | grep 'model name'| nl
  echo ' '
  echo '---------------------------------'
  echo '- D I S K S P A C E -'
  echo '---------------------------------'
  echo ' '
  df -h
  echo ' '
}

# Helps to find the number of times a particular class/module is being used in the app.
# This way you can create a distribution graph of your most coupled classes or
# found out the classes/modules which are "dead code".
function grep_class_count() {
  grep -rh '^[[:space:]]*\(class\|module\)\b' app lib --include='*.rb' | sed 's/^[[:space:]]*//' | cut -d ' ' -f 2 | while read klass; do echo "`grep -rl "\b$klass\b" app lib --include="*.rb" | wc -l` $klass"; done | sort -n
}

# usage:
#  if ! has 'curl'; then
#    if has 'wget'; then
#      # Emulate curl with wget
#      curl() {
#        ARGS="$* "
#        ARGS=${ARGS/-s /-q }
#        ARGS=${ARGS/-o /-O }
#        wget $ARGS
#      }
#    fi
#  fi
function has() {
  type "$1" > /dev/null 2>&1
  return $?
}

# usage:
#  occurrences 't' 'test' => 2
function occurrences() {
  local count=$(echo $2 | grep -oh $1 | wc -l);
  echo $count;
}

function migration_time() {
  echo "`date +%F%r`" | tr -d ': APM' | tr -d '-'
}

# sum 1 2
# echo $? => 3
sum() {
  [[ $# -eq 2 ]] || { echo 'sum function requires 2 arguments'; return 1; }
  return $(( $1 + $2 ));
}

# Use for example in `git checkout -b 3432-$(gitbranchname "copied issue name from ticket")`
gitbranchname() {
  [[ $# -eq 1 ]] || { echo 'gitbranchname function requires 1 argument'; return 1; }

  branch_name=$(printf "$1" | tr [A-Z] [a-z] | tr -s [[:space:]] '-')
  printf "$branch_name"
}
