#!/usr/bin/ruby -w

# push SSH key to a remote server via SSH
# a.
#   install-key user@remoteserver.com -key ~/.ssh/...

module KeyInstaller
  extend self

  attr_reader :options

  def run(args)
    install_key(args.shift, args)
  end

  private

  def install_key(host, args)
    fail ArgumentError, 'Remote hostname is required' if host.nil?

    args_to_options(args)
    if options.keys.include?('key')
      if File.exist?(options['key'])
        public_key = File.read(options['key'])
      else
        fail Errno::ENOENT, options['key'].to_s
      end
    else
      # get the key from ~/.ssh/
      for possible_key in %w{id_rsa.pub id_dsa.pub}
        path_to_key = File.join(ENV['HOME'], '.ssh', possible_key)
        if File.exist?(path_to_key)
          public_key = File.read(path_to_key)
          break
        end
      end
    end

    ssh_command = %Q{echo '#{public_key}' | ssh #{host} -p #{ssh_port} "mkdir -p .ssh && cat - >> .ssh/authorized_keys2"}

    if %x[ #{ssh_command} ] == ''
      puts " ** Key installed to '#{host}' successfully."
    else
      puts " ** Something went wrong."
    end

  end

  def ssh_port
    @options['port'] || @options['p'] || 22
  end

  def args_to_options(args)
    @options ||= {}
    c = 0
    for arg in args
      value = args[c + 1] || ""
      value = nil if value.include?("-")
      @options[arg.gsub(/-/, "")] = value if arg.include?("-")
      c += 1
    end
    size = @options.size * 2
    args.slice!(0 - size, size)
  end
end

KeyInstaller.run(ARGV)
